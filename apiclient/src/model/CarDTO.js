/**
 * 智选车API文档
 * 智选车汽车推荐购买平台API文档
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CarDetailDTO from './CarDetailDTO';

/**
 * The CarDTO model module.
 * @module model/CarDTO
 * @version 1.0
 */
class CarDTO {
    /**
     * Constructs a new <code>CarDTO</code>.
     * @alias module:model/CarDTO
     * @param dealerId {Number} 
     * @param brand {String} 
     * @param model {String} 
     * @param year {Number} 
     * @param price {Number} 
     * @param category {String} 
     */
    constructor(dealerId, brand, model, year, price, category) { 
        
        CarDTO.initialize(this, dealerId, brand, model, year, price, category);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, dealerId, brand, model, year, price, category) { 
        obj['dealerId'] = dealerId;
        obj['brand'] = brand;
        obj['model'] = model;
        obj['year'] = year;
        obj['price'] = price;
        obj['category'] = category;
    }

    /**
     * Constructs a <code>CarDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CarDTO} obj Optional instance to populate.
     * @return {module:model/CarDTO} The populated <code>CarDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CarDTO();

            if (data.hasOwnProperty('carId')) {
                obj['carId'] = ApiClient.convertToType(data['carId'], 'Number');
            }
            if (data.hasOwnProperty('dealerId')) {
                obj['dealerId'] = ApiClient.convertToType(data['dealerId'], 'Number');
            }
            if (data.hasOwnProperty('brand')) {
                obj['brand'] = ApiClient.convertToType(data['brand'], 'String');
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], 'String');
            }
            if (data.hasOwnProperty('year')) {
                obj['year'] = ApiClient.convertToType(data['year'], 'Number');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'Number');
            }
            if (data.hasOwnProperty('detail')) {
                obj['detail'] = CarDetailDTO.constructFromObject(data['detail']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CarDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CarDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CarDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['brand'] && !(typeof data['brand'] === 'string' || data['brand'] instanceof String)) {
            throw new Error("Expected the field `brand` to be a primitive type in the JSON string but got " + data['brand']);
        }
        // ensure the json data is a string
        if (data['model'] && !(typeof data['model'] === 'string' || data['model'] instanceof String)) {
            throw new Error("Expected the field `model` to be a primitive type in the JSON string but got " + data['model']);
        }
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // validate the optional field `detail`
        if (data['detail']) { // data not null
          CarDetailDTO.validateJSON(data['detail']);
        }

        return true;
    }


}

CarDTO.RequiredProperties = ["dealerId", "brand", "model", "year", "price", "category"];

/**
 * @member {Number} carId
 */
CarDTO.prototype['carId'] = undefined;

/**
 * @member {Number} dealerId
 */
CarDTO.prototype['dealerId'] = undefined;

/**
 * @member {String} brand
 */
CarDTO.prototype['brand'] = undefined;

/**
 * @member {String} model
 */
CarDTO.prototype['model'] = undefined;

/**
 * @member {Number} year
 */
CarDTO.prototype['year'] = undefined;

/**
 * @member {Number} price
 */
CarDTO.prototype['price'] = undefined;

/**
 * @member {String} category
 */
CarDTO.prototype['category'] = undefined;

/**
 * @member {Number} status
 */
CarDTO.prototype['status'] = undefined;

/**
 * @member {module:model/CarDetailDTO} detail
 */
CarDTO.prototype['detail'] = undefined;






export default CarDTO;

