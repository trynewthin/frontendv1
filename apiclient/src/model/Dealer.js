/**
 * 智选车API文档
 * 智选车汽车推荐购买平台API文档
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Dealer model module.
 * @module model/Dealer
 * @version 1.0
 */
class Dealer {
    /**
     * Constructs a new <code>Dealer</code>.
     * @alias module:model/Dealer
     * @param userId {Number} 
     * @param dealerName {String} 
     */
    constructor(userId, dealerName) { 
        
        Dealer.initialize(this, userId, dealerName);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, userId, dealerName) { 
        obj['userId'] = userId;
        obj['dealerName'] = dealerName;
    }

    /**
     * Constructs a <code>Dealer</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Dealer} obj Optional instance to populate.
     * @return {module:model/Dealer} The populated <code>Dealer</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Dealer();

            if (data.hasOwnProperty('dealerId')) {
                obj['dealerId'] = ApiClient.convertToType(data['dealerId'], 'Number');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'Number');
            }
            if (data.hasOwnProperty('dealerName')) {
                obj['dealerName'] = ApiClient.convertToType(data['dealerName'], 'String');
            }
            if (data.hasOwnProperty('address')) {
                obj['address'] = ApiClient.convertToType(data['address'], 'String');
            }
            if (data.hasOwnProperty('businessLicense')) {
                obj['businessLicense'] = ApiClient.convertToType(data['businessLicense'], 'String');
            }
            if (data.hasOwnProperty('contactPerson')) {
                obj['contactPerson'] = ApiClient.convertToType(data['contactPerson'], 'String');
            }
            if (data.hasOwnProperty('contactPhone')) {
                obj['contactPhone'] = ApiClient.convertToType(data['contactPhone'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Dealer</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Dealer</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Dealer.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['dealerName'] && !(typeof data['dealerName'] === 'string' || data['dealerName'] instanceof String)) {
            throw new Error("Expected the field `dealerName` to be a primitive type in the JSON string but got " + data['dealerName']);
        }
        // ensure the json data is a string
        if (data['address'] && !(typeof data['address'] === 'string' || data['address'] instanceof String)) {
            throw new Error("Expected the field `address` to be a primitive type in the JSON string but got " + data['address']);
        }
        // ensure the json data is a string
        if (data['businessLicense'] && !(typeof data['businessLicense'] === 'string' || data['businessLicense'] instanceof String)) {
            throw new Error("Expected the field `businessLicense` to be a primitive type in the JSON string but got " + data['businessLicense']);
        }
        // ensure the json data is a string
        if (data['contactPerson'] && !(typeof data['contactPerson'] === 'string' || data['contactPerson'] instanceof String)) {
            throw new Error("Expected the field `contactPerson` to be a primitive type in the JSON string but got " + data['contactPerson']);
        }
        // ensure the json data is a string
        if (data['contactPhone'] && !(typeof data['contactPhone'] === 'string' || data['contactPhone'] instanceof String)) {
            throw new Error("Expected the field `contactPhone` to be a primitive type in the JSON string but got " + data['contactPhone']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }

        return true;
    }


}

Dealer.RequiredProperties = ["userId", "dealerName"];

/**
 * @member {Number} dealerId
 */
Dealer.prototype['dealerId'] = undefined;

/**
 * @member {Number} userId
 */
Dealer.prototype['userId'] = undefined;

/**
 * @member {String} dealerName
 */
Dealer.prototype['dealerName'] = undefined;

/**
 * @member {String} address
 */
Dealer.prototype['address'] = undefined;

/**
 * @member {String} businessLicense
 */
Dealer.prototype['businessLicense'] = undefined;

/**
 * @member {String} contactPerson
 */
Dealer.prototype['contactPerson'] = undefined;

/**
 * @member {String} contactPhone
 */
Dealer.prototype['contactPhone'] = undefined;

/**
 * @member {module:model/Dealer.StatusEnum} status
 */
Dealer.prototype['status'] = undefined;

/**
 * @member {String} description
 */
Dealer.prototype['description'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
Dealer['StatusEnum'] = {

    /**
     * value: "PENDING"
     * @const
     */
    "PENDING": "PENDING",

    /**
     * value: "APPROVED"
     * @const
     */
    "APPROVED": "APPROVED",

    /**
     * value: "REJECTED"
     * @const
     */
    "REJECTED": "REJECTED"
};



export default Dealer;

