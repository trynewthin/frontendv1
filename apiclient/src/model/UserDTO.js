/**
 * 智选车API文档
 * 智选车汽车推荐购买平台API文档
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UserDTO model module.
 * @module model/UserDTO
 * @version 1.0
 */
class UserDTO {
    /**
     * Constructs a new <code>UserDTO</code>.
     * @alias module:model/UserDTO
     * @param username {String} 
     * @param password {String} 
     * @param email {String} 
     * @param userType {String} 
     */
    constructor(username, password, email, userType) { 
        
        UserDTO.initialize(this, username, password, email, userType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, username, password, email, userType) { 
        obj['username'] = username;
        obj['password'] = password;
        obj['email'] = email;
        obj['userType'] = userType;
    }

    /**
     * Constructs a <code>UserDTO</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserDTO} obj Optional instance to populate.
     * @return {module:model/UserDTO} The populated <code>UserDTO</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserDTO();

            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
            if (data.hasOwnProperty('password')) {
                obj['password'] = ApiClient.convertToType(data['password'], 'String');
            }
            if (data.hasOwnProperty('email')) {
                obj['email'] = ApiClient.convertToType(data['email'], 'String');
            }
            if (data.hasOwnProperty('phone')) {
                obj['phone'] = ApiClient.convertToType(data['phone'], 'String');
            }
            if (data.hasOwnProperty('userType')) {
                obj['userType'] = ApiClient.convertToType(data['userType'], 'String');
            }
            if (data.hasOwnProperty('userTypeEnum')) {
                obj['userTypeEnum'] = ApiClient.convertToType(data['userTypeEnum'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserDTO</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserDTO</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserDTO.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }
        // ensure the json data is a string
        if (data['password'] && !(typeof data['password'] === 'string' || data['password'] instanceof String)) {
            throw new Error("Expected the field `password` to be a primitive type in the JSON string but got " + data['password']);
        }
        // ensure the json data is a string
        if (data['email'] && !(typeof data['email'] === 'string' || data['email'] instanceof String)) {
            throw new Error("Expected the field `email` to be a primitive type in the JSON string but got " + data['email']);
        }
        // ensure the json data is a string
        if (data['phone'] && !(typeof data['phone'] === 'string' || data['phone'] instanceof String)) {
            throw new Error("Expected the field `phone` to be a primitive type in the JSON string but got " + data['phone']);
        }
        // ensure the json data is a string
        if (data['userType'] && !(typeof data['userType'] === 'string' || data['userType'] instanceof String)) {
            throw new Error("Expected the field `userType` to be a primitive type in the JSON string but got " + data['userType']);
        }
        // ensure the json data is a string
        if (data['userTypeEnum'] && !(typeof data['userTypeEnum'] === 'string' || data['userTypeEnum'] instanceof String)) {
            throw new Error("Expected the field `userTypeEnum` to be a primitive type in the JSON string but got " + data['userTypeEnum']);
        }

        return true;
    }


}

UserDTO.RequiredProperties = ["username", "password", "email", "userType"];

/**
 * @member {String} username
 */
UserDTO.prototype['username'] = undefined;

/**
 * @member {String} password
 */
UserDTO.prototype['password'] = undefined;

/**
 * @member {String} email
 */
UserDTO.prototype['email'] = undefined;

/**
 * @member {String} phone
 */
UserDTO.prototype['phone'] = undefined;

/**
 * @member {String} userType
 */
UserDTO.prototype['userType'] = undefined;

/**
 * @member {module:model/UserDTO.UserTypeEnumEnum} userTypeEnum
 */
UserDTO.prototype['userTypeEnum'] = undefined;





/**
 * Allowed values for the <code>userTypeEnum</code> property.
 * @enum {String}
 * @readonly
 */
UserDTO['UserTypeEnumEnum'] = {

    /**
     * value: "NORMAL_USER"
     * @const
     */
    "NORMAL_USER": "NORMAL_USER",

    /**
     * value: "DEALER"
     * @const
     */
    "DEALER": "DEALER",

    /**
     * value: "ADMIN"
     * @const
     */
    "ADMIN": "ADMIN"
};



export default UserDTO;

