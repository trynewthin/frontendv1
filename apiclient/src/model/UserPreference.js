/**
 * 智选车API文档
 * 智选车汽车推荐购买平台API文档
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UserPreference model module.
 * @module model/UserPreference
 * @version 1.0
 */
class UserPreference {
    /**
     * Constructs a new <code>UserPreference</code>.
     * @alias module:model/UserPreference
     * @param userId {Number} 
     * @param updateTime {Date} 
     */
    constructor(userId, updateTime) { 
        
        UserPreference.initialize(this, userId, updateTime);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, userId, updateTime) { 
        obj['userId'] = userId;
        obj['updateTime'] = updateTime;
    }

    /**
     * Constructs a <code>UserPreference</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UserPreference} obj Optional instance to populate.
     * @return {module:model/UserPreference} The populated <code>UserPreference</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UserPreference();

            if (data.hasOwnProperty('preferenceId')) {
                obj['preferenceId'] = ApiClient.convertToType(data['preferenceId'], 'Number');
            }
            if (data.hasOwnProperty('userId')) {
                obj['userId'] = ApiClient.convertToType(data['userId'], 'Number');
            }
            if (data.hasOwnProperty('priceMin')) {
                obj['priceMin'] = ApiClient.convertToType(data['priceMin'], 'Number');
            }
            if (data.hasOwnProperty('priceMax')) {
                obj['priceMax'] = ApiClient.convertToType(data['priceMax'], 'Number');
            }
            if (data.hasOwnProperty('preferredBrands')) {
                obj['preferredBrands'] = ApiClient.convertToType(data['preferredBrands'], 'String');
            }
            if (data.hasOwnProperty('preferredCategories')) {
                obj['preferredCategories'] = ApiClient.convertToType(data['preferredCategories'], 'String');
            }
            if (data.hasOwnProperty('otherPreferences')) {
                obj['otherPreferences'] = ApiClient.convertToType(data['otherPreferences'], 'String');
            }
            if (data.hasOwnProperty('updateTime')) {
                obj['updateTime'] = ApiClient.convertToType(data['updateTime'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UserPreference</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UserPreference</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UserPreference.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['preferredBrands'] && !(typeof data['preferredBrands'] === 'string' || data['preferredBrands'] instanceof String)) {
            throw new Error("Expected the field `preferredBrands` to be a primitive type in the JSON string but got " + data['preferredBrands']);
        }
        // ensure the json data is a string
        if (data['preferredCategories'] && !(typeof data['preferredCategories'] === 'string' || data['preferredCategories'] instanceof String)) {
            throw new Error("Expected the field `preferredCategories` to be a primitive type in the JSON string but got " + data['preferredCategories']);
        }
        // ensure the json data is a string
        if (data['otherPreferences'] && !(typeof data['otherPreferences'] === 'string' || data['otherPreferences'] instanceof String)) {
            throw new Error("Expected the field `otherPreferences` to be a primitive type in the JSON string but got " + data['otherPreferences']);
        }

        return true;
    }


}

UserPreference.RequiredProperties = ["userId", "updateTime"];

/**
 * @member {Number} preferenceId
 */
UserPreference.prototype['preferenceId'] = undefined;

/**
 * @member {Number} userId
 */
UserPreference.prototype['userId'] = undefined;

/**
 * @member {Number} priceMin
 */
UserPreference.prototype['priceMin'] = undefined;

/**
 * @member {Number} priceMax
 */
UserPreference.prototype['priceMax'] = undefined;

/**
 * @member {String} preferredBrands
 */
UserPreference.prototype['preferredBrands'] = undefined;

/**
 * @member {String} preferredCategories
 */
UserPreference.prototype['preferredCategories'] = undefined;

/**
 * @member {String} otherPreferences
 */
UserPreference.prototype['otherPreferences'] = undefined;

/**
 * @member {Date} updateTime
 */
UserPreference.prototype['updateTime'] = undefined;






export default UserPreference;

