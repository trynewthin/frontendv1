/**
 * 智选车API文档
 * 智选车汽车推荐购买平台API文档
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiResponse from '../model/ApiResponse';
import ApiResponseDealer from '../model/ApiResponseDealer';
import ApiResponseObject from '../model/ApiResponseObject';
import ApiResponseUser from '../model/ApiResponseUser';
import ApiResponseUserPreference from '../model/ApiResponseUserPreference';
import CarDTO from '../model/CarDTO';
import CarDetailDTO from '../model/CarDetailDTO';
import ContentAuditDTO from '../model/ContentAuditDTO';
import DealerAuditDTO from '../model/DealerAuditDTO';
import DealerDTO from '../model/DealerDTO';
import LoginDTO from '../model/LoginDTO';
import PasswordUpdateDTO from '../model/PasswordUpdateDTO';
import PreferenceDTO from '../model/PreferenceDTO';
import Result from '../model/Result';
import UploadCarImageRequest from '../model/UploadCarImageRequest';
import UserDTO from '../model/UserDTO';
import UserProfileDTO from '../model/UserProfileDTO';
import UserStatusDTO from '../model/UserStatusDTO';

/**
*  service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }



    /**
     * 添加收藏
     * 将指定车辆添加到当前用户的收藏列表中。如果已收藏，则返回409状态码。
     * @param {module:model/null} UNKNOWN_PARAMETER_NAME 车辆ID
     * @param {Object.<String, {String: Number}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    addFavoriteWithHttpInfo(UNKNOWN_PARAMETER_NAME, requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'UNKNOWN_PARAMETER_NAME' is set
      if (UNKNOWN_PARAMETER_NAME === undefined || UNKNOWN_PARAMETER_NAME === null) {
        throw new Error("Missing the required parameter 'UNKNOWN_PARAMETER_NAME' when calling addFavorite");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling addFavorite");
      }

      let pathParams = {
      };
      let queryParams = {
        'car_id': UNKNOWN_PARAMETER_NAME
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/favorites', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 添加收藏
     * 将指定车辆添加到当前用户的收藏列表中。如果已收藏，则返回409状态码。
     * @param {module:model/null} UNKNOWN_PARAMETER_NAME 车辆ID
     * @param {Object.<String, {String: Number}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    addFavorite(UNKNOWN_PARAMETER_NAME, requestBody) {
      return this.addFavoriteWithHttpInfo(UNKNOWN_PARAMETER_NAME, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 审核车辆信息
     * 对车辆信息进行审核
     * @param {Number} carId 车辆ID
     * @param {module:model/ContentAuditDTO} contentAuditDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    auditCarWithHttpInfo(carId, contentAuditDTO) {
      let postBody = contentAuditDTO;
      // verify the required parameter 'carId' is set
      if (carId === undefined || carId === null) {
        throw new Error("Missing the required parameter 'carId' when calling auditCar");
      }
      // verify the required parameter 'contentAuditDTO' is set
      if (contentAuditDTO === undefined || contentAuditDTO === null) {
        throw new Error("Missing the required parameter 'contentAuditDTO' when calling auditCar");
      }

      let pathParams = {
        'carId': carId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/admin/audit/cars/{carId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 审核车辆信息
     * 对车辆信息进行审核
     * @param {Number} carId 车辆ID
     * @param {module:model/ContentAuditDTO} contentAuditDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    auditCar(carId, contentAuditDTO) {
      return this.auditCarWithHttpInfo(carId, contentAuditDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 审核经销商
     * 审核经销商资质
     * @param {Number} dealerId 经销商ID
     * @param {module:model/DealerAuditDTO} dealerAuditDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    auditDealerWithHttpInfo(dealerId, dealerAuditDTO) {
      let postBody = dealerAuditDTO;
      // verify the required parameter 'dealerId' is set
      if (dealerId === undefined || dealerId === null) {
        throw new Error("Missing the required parameter 'dealerId' when calling auditDealer");
      }
      // verify the required parameter 'dealerAuditDTO' is set
      if (dealerAuditDTO === undefined || dealerAuditDTO === null) {
        throw new Error("Missing the required parameter 'dealerAuditDTO' when calling auditDealer");
      }

      let pathParams = {
        'dealerId': dealerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/admin/dealers/{dealerId}/audit', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 审核经销商
     * 审核经销商资质
     * @param {Number} dealerId 经销商ID
     * @param {module:model/DealerAuditDTO} dealerAuditDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    auditDealer(dealerId, dealerAuditDTO) {
      return this.auditDealerWithHttpInfo(dealerId, dealerAuditDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 批量删除消息
     * 批量删除多条消息
     * @param {String} body 消息ID列表
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    batchDeleteMessagesWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling batchDeleteMessages");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/message/batch', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 批量删除消息
     * 批量删除多条消息
     * @param {String} body 消息ID列表
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    batchDeleteMessages(body) {
      return this.batchDeleteMessagesWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 批量标记消息为已读
     * 将多条消息批量标记为已读状态
     * @param {String} body 消息ID列表
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    batchMarkReadWithHttpInfo(body) {
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling batchMarkRead");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/message/read/batch', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 批量标记消息为已读
     * 将多条消息批量标记为已读状态
     * @param {String} body 消息ID列表
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    batchMarkRead(body) {
      return this.batchMarkReadWithHttpInfo(body)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 取消预约
     * 用户取消自己的预约
     * @param {Number} appointmentId 预约ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    cancelAppointmentWithHttpInfo(appointmentId) {
      let postBody = null;
      // verify the required parameter 'appointmentId' is set
      if (appointmentId === undefined || appointmentId === null) {
        throw new Error("Missing the required parameter 'appointmentId' when calling cancelAppointment");
      }

      let pathParams = {
        'appointmentId': appointmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/appointment/{appointmentId}/cancel', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 取消预约
     * 用户取消自己的预约
     * @param {Number} appointmentId 预约ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    cancelAppointment(appointmentId) {
      return this.cancelAppointmentWithHttpInfo(appointmentId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 修改车辆状态
     * 修改车辆的上架/下架状态
     * @param {Number} carId 车辆ID
     * @param {Object.<String, {String: Number}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    changeCarStatusWithHttpInfo(carId, requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'carId' is set
      if (carId === undefined || carId === null) {
        throw new Error("Missing the required parameter 'carId' when calling changeCarStatus");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling changeCarStatus");
      }

      let pathParams = {
        'car_id': carId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/cars/{car_id}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 修改车辆状态
     * 修改车辆的上架/下架状态
     * @param {Number} carId 车辆ID
     * @param {Object.<String, {String: Number}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    changeCarStatus(carId, requestBody) {
      return this.changeCarStatusWithHttpInfo(carId, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 检查预约时间是否可用
     * 检查指定经销商在指定时间是否可以预约
     * @param {Number} dealerId 经销商ID
     * @param {Date} appointmentTime 预约时间，格式：yyyy-MM-dd HH:mm:ss
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Boolean} and HTTP response
     */
    checkAppointmentTimeWithHttpInfo(dealerId, appointmentTime) {
      let postBody = null;
      // verify the required parameter 'dealerId' is set
      if (dealerId === undefined || dealerId === null) {
        throw new Error("Missing the required parameter 'dealerId' when calling checkAppointmentTime");
      }
      // verify the required parameter 'appointmentTime' is set
      if (appointmentTime === undefined || appointmentTime === null) {
        throw new Error("Missing the required parameter 'appointmentTime' when calling checkAppointmentTime");
      }

      let pathParams = {
      };
      let queryParams = {
        'dealerId': dealerId,
        'appointmentTime': appointmentTime
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'Boolean';
      return this.apiClient.callApi(
        '/appointment/check-time', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 检查预约时间是否可用
     * 检查指定经销商在指定时间是否可以预约
     * @param {Number} dealerId 经销商ID
     * @param {Date} appointmentTime 预约时间，格式：yyyy-MM-dd HH:mm:ss
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Boolean}
     */
    checkAppointmentTime(dealerId, appointmentTime) {
      return this.checkAppointmentTimeWithHttpInfo(dealerId, appointmentTime)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 检查是否收藏
     * 检查指定车辆是否已被当前用户收藏
     * @param {Number} carId 车辆ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    checkIsFavoriteWithHttpInfo(carId) {
      let postBody = null;
      // verify the required parameter 'carId' is set
      if (carId === undefined || carId === null) {
        throw new Error("Missing the required parameter 'carId' when calling checkIsFavorite");
      }

      let pathParams = {
        'carId': carId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/favorites/check/{carId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 检查是否收藏
     * 检查指定车辆是否已被当前用户收藏
     * @param {Number} carId 车辆ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    checkIsFavorite(carId) {
      return this.checkIsFavoriteWithHttpInfo(carId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 清空浏览历史
     * 清空当前用户的所有浏览记录
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    clearBrowseHistoryWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/behavior/browse', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 清空浏览历史
     * 清空当前用户的所有浏览记录
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    clearBrowseHistory() {
      return this.clearBrowseHistoryWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 清空搜索历史
     * 清空当前用户的所有搜索记录
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    clearSearchHistoryWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/behavior/search', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 清空搜索历史
     * 清空当前用户的所有搜索记录
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    clearSearchHistory() {
      return this.clearSearchHistoryWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 创建预约
     * 创建一个新的预约，需要指定车辆ID、经销商ID、预约类型和时间
     * @param {Number} carId 车辆ID
     * @param {Number} dealerId 经销商ID
     * @param {String} appointmentType 预约类型：看车、试驾
     * @param {Date} appointmentTime 预约时间，格式：yyyy-MM-dd HH:mm:ss
     * @param {Object} opts Optional parameters
     * @param {String} [remarks] 备注信息
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Number} and HTTP response
     */
    createAppointmentWithHttpInfo(carId, dealerId, appointmentType, appointmentTime, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'carId' is set
      if (carId === undefined || carId === null) {
        throw new Error("Missing the required parameter 'carId' when calling createAppointment");
      }
      // verify the required parameter 'dealerId' is set
      if (dealerId === undefined || dealerId === null) {
        throw new Error("Missing the required parameter 'dealerId' when calling createAppointment");
      }
      // verify the required parameter 'appointmentType' is set
      if (appointmentType === undefined || appointmentType === null) {
        throw new Error("Missing the required parameter 'appointmentType' when calling createAppointment");
      }
      // verify the required parameter 'appointmentTime' is set
      if (appointmentTime === undefined || appointmentTime === null) {
        throw new Error("Missing the required parameter 'appointmentTime' when calling createAppointment");
      }

      let pathParams = {
      };
      let queryParams = {
        'carId': carId,
        'dealerId': dealerId,
        'appointmentType': appointmentType,
        'appointmentTime': appointmentTime,
        'remarks': opts['remarks']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/appointment/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 创建预约
     * 创建一个新的预约，需要指定车辆ID、经销商ID、预约类型和时间
     * @param {Number} carId 车辆ID
     * @param {Number} dealerId 经销商ID
     * @param {String} appointmentType 预约类型：看车、试驾
     * @param {Date} appointmentTime 预约时间，格式：yyyy-MM-dd HH:mm:ss
     * @param {Object} opts Optional parameters
     * @param {String} opts.remarks 备注信息
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Number}
     */
    createAppointment(carId, dealerId, appointmentType, appointmentTime, opts) {
      return this.createAppointmentWithHttpInfo(carId, dealerId, appointmentType, appointmentTime, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 创建新车辆
     * 创建新的车辆信息，包括基本信息和详细配置
     * @param {module:model/CarDTO} carDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    createCarWithHttpInfo(carDTO) {
      let postBody = carDTO;
      // verify the required parameter 'carDTO' is set
      if (carDTO === undefined || carDTO === null) {
        throw new Error("Missing the required parameter 'carDTO' when calling createCar");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/cars', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 创建新车辆
     * 创建新的车辆信息，包括基本信息和详细配置
     * @param {module:model/CarDTO} carDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    createCar(carDTO) {
      return this.createCarWithHttpInfo(carDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 删除浏览记录
     * 删除当前用户特定车辆的浏览记录
     * @param {Number} carId 车辆ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteBrowseRecordWithHttpInfo(carId) {
      let postBody = null;
      // verify the required parameter 'carId' is set
      if (carId === undefined || carId === null) {
        throw new Error("Missing the required parameter 'carId' when calling deleteBrowseRecord");
      }

      let pathParams = {
        'carId': carId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/behavior/browse/{carId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 删除浏览记录
     * 删除当前用户特定车辆的浏览记录
     * @param {Number} carId 车辆ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteBrowseRecord(carId) {
      return this.deleteBrowseRecordWithHttpInfo(carId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 删除车辆
     * 删除指定车辆及其所有相关信息（详情、图片等）
     * @param {Number} carId 车辆ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    deleteCarWithHttpInfo(carId) {
      let postBody = null;
      // verify the required parameter 'carId' is set
      if (carId === undefined || carId === null) {
        throw new Error("Missing the required parameter 'carId' when calling deleteCar");
      }

      let pathParams = {
        'car_id': carId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/cars/{car_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 删除车辆
     * 删除指定车辆及其所有相关信息（详情、图片等）
     * @param {Number} carId 车辆ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    deleteCar(carId) {
      return this.deleteCarWithHttpInfo(carId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 删除车辆
     * 删除指定的车辆及其关联信息
     * @param {Number} carId 车辆ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    deleteCar1WithHttpInfo(carId) {
      let postBody = null;
      // verify the required parameter 'carId' is set
      if (carId === undefined || carId === null) {
        throw new Error("Missing the required parameter 'carId' when calling deleteCar1");
      }

      let pathParams = {
        'carId': carId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/admin/audit/cars/{carId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 删除车辆
     * 删除指定的车辆及其关联信息
     * @param {Number} carId 车辆ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    deleteCar1(carId) {
      return this.deleteCar1WithHttpInfo(carId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 删除车辆详情
     * 删除指定车辆的详细配置信息
     * @param {Number} carId 车辆ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    deleteCarDetailWithHttpInfo(carId) {
      let postBody = null;
      // verify the required parameter 'carId' is set
      if (carId === undefined || carId === null) {
        throw new Error("Missing the required parameter 'carId' when calling deleteCarDetail");
      }

      let pathParams = {
        'car_id': carId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/cars/{car_id}/detail', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 删除车辆详情
     * 删除指定车辆的详细配置信息
     * @param {Number} carId 车辆ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    deleteCarDetail(carId) {
      return this.deleteCarDetailWithHttpInfo(carId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 删除车辆图片
     * 删除指定的车辆图片
     * @param {Number} carId 
     * @param {Number} imageId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseObject} and HTTP response
     */
    deleteCarImageWithHttpInfo(carId, imageId) {
      let postBody = null;
      // verify the required parameter 'carId' is set
      if (carId === undefined || carId === null) {
        throw new Error("Missing the required parameter 'carId' when calling deleteCarImage");
      }
      // verify the required parameter 'imageId' is set
      if (imageId === undefined || imageId === null) {
        throw new Error("Missing the required parameter 'imageId' when calling deleteCarImage");
      }

      let pathParams = {
        'carId': carId,
        'imageId': imageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ApiResponseObject;
      return this.apiClient.callApi(
        '/cars/{carId}/images/{imageId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 删除车辆图片
     * 删除指定的车辆图片
     * @param {Number} carId 
     * @param {Number} imageId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseObject}
     */
    deleteCarImage(carId, imageId) {
      return this.deleteCarImageWithHttpInfo(carId, imageId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 删除经销商
     * 删除指定经销商及其关联信息
     * @param {Number} dealerId 经销商ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    deleteDealerWithHttpInfo(dealerId) {
      let postBody = null;
      // verify the required parameter 'dealerId' is set
      if (dealerId === undefined || dealerId === null) {
        throw new Error("Missing the required parameter 'dealerId' when calling deleteDealer");
      }

      let pathParams = {
        'dealerId': dealerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/admin/dealers/{dealerId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 删除经销商
     * 删除指定经销商及其关联信息
     * @param {Number} dealerId 经销商ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    deleteDealer(dealerId) {
      return this.deleteDealerWithHttpInfo(dealerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 删除消息
     * 删除指定的消息
     * @param {Number} messageId 消息ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    deleteMessageWithHttpInfo(messageId) {
      let postBody = null;
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling deleteMessage");
      }

      let pathParams = {
        'messageId': messageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/message/{messageId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 删除消息
     * 删除指定的消息
     * @param {Number} messageId 消息ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    deleteMessage(messageId) {
      return this.deleteMessageWithHttpInfo(messageId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 删除搜索记录
     * 删除特定的搜索记录
     * @param {Number} searchId 搜索记录ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    deleteSearchRecordWithHttpInfo(searchId) {
      let postBody = null;
      // verify the required parameter 'searchId' is set
      if (searchId === undefined || searchId === null) {
        throw new Error("Missing the required parameter 'searchId' when calling deleteSearchRecord");
      }

      let pathParams = {
        'searchId': searchId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/behavior/search/{searchId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 删除搜索记录
     * 删除特定的搜索记录
     * @param {Number} searchId 搜索记录ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    deleteSearchRecord(searchId) {
      return this.deleteSearchRecordWithHttpInfo(searchId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 删除用户
     * 删除指定用户及其关联信息
     * @param {Number} userId 用户ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    deleteUserWithHttpInfo(userId) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling deleteUser");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/admin/users/{userId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 删除用户
     * 删除指定用户及其关联信息
     * @param {Number} userId 用户ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    deleteUser(userId) {
      return this.deleteUserWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 多条件筛选车辆
     * 根据多个条件筛选车辆，支持品牌、类别、价格区间等组合查询
     * @param {Object.<String, {String: Object}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    filterCarsWithHttpInfo(requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling filterCars");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/cars/filter', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 多条件筛选车辆
     * 根据多个条件筛选车辆，支持品牌、类别、价格区间等组合查询
     * @param {Object.<String, {String: Object}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    filterCars(requestBody) {
      return this.filterCarsWithHttpInfo(requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取行为推荐
     * 根据用户浏览历史推荐相似车辆
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] 推荐数量限制
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    getBehaviorRecommendationsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/recommendations/behavior', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取行为推荐
     * 根据用户浏览历史推荐相似车辆
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 推荐数量限制 (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    getBehaviorRecommendations(opts) {
      return this.getBehaviorRecommendationsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取品牌列表
     * 获取所有车辆品牌及其数量统计
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    getBrandsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/cars/brands', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取品牌列表
     * 获取所有车辆品牌及其数量统计
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    getBrands() {
      return this.getBrandsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取浏览历史
     * 获取当前用户的浏览历史记录列表，包含车辆基本信息和浏览时间、时长等信息。支持分页查询。
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] 页码
     * @param {Number} [size = 10)] 每页条数
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    getBrowseHistoryWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/behavior/browse', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取浏览历史
     * 获取当前用户的浏览历史记录列表，包含车辆基本信息和浏览时间、时长等信息。支持分页查询。
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 页码 (default to 1)
     * @param {Number} opts.size 每页条数 (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    getBrowseHistory(opts) {
      return this.getBrowseHistoryWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取指定车辆的预约
     * 获取当前用户关于指定车辆的所有预约
     * @param {Number} carId 车辆ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    getCarAppointmentsWithHttpInfo(carId) {
      let postBody = null;
      // verify the required parameter 'carId' is set
      if (carId === undefined || carId === null) {
        throw new Error("Missing the required parameter 'carId' when calling getCarAppointments");
      }

      let pathParams = {
        'carId': carId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/appointment/car/{carId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取指定车辆的预约
     * 获取当前用户关于指定车辆的所有预约
     * @param {Number} carId 车辆ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    getCarAppointments(carId) {
      return this.getCarAppointmentsWithHttpInfo(carId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取待审核车辆
     * 获取待审核的车辆信息列表
     * @param {Object} opts Optional parameters
     * @param {String} [keyword] 关键词
     * @param {String} [auditStatus] 审核状态
     * @param {Number} [dealerId] 经销商ID
     * @param {String} [startDate] 提交起始日期
     * @param {String} [endDate] 提交结束日期
     * @param {Number} [page = 1)] 页码
     * @param {Number} [size = 20)] 每页记录数
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    getCarAuditListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'keyword': opts['keyword'],
        'auditStatus': opts['auditStatus'],
        'dealerId': opts['dealerId'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/admin/audit/cars', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取待审核车辆
     * 获取待审核的车辆信息列表
     * @param {Object} opts Optional parameters
     * @param {String} opts.keyword 关键词
     * @param {String} opts.auditStatus 审核状态
     * @param {Number} opts.dealerId 经销商ID
     * @param {String} opts.startDate 提交起始日期
     * @param {String} opts.endDate 提交结束日期
     * @param {Number} opts.page 页码 (default to 1)
     * @param {Number} opts.size 每页记录数 (default to 20)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    getCarAuditList(opts) {
      return this.getCarAuditListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取车辆详情
     * 根据车辆ID获取完整的车辆信息，包括基本信息、详细配置和图片
     * @param {Number} carId 车辆ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    getCarDetailWithHttpInfo(carId) {
      let postBody = null;
      // verify the required parameter 'carId' is set
      if (carId === undefined || carId === null) {
        throw new Error("Missing the required parameter 'carId' when calling getCarDetail");
      }

      let pathParams = {
        'car_id': carId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/cars/{car_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取车辆详情
     * 根据车辆ID获取完整的车辆信息，包括基本信息、详细配置和图片
     * @param {Number} carId 车辆ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    getCarDetail(carId) {
      return this.getCarDetailWithHttpInfo(carId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取车辆详情
     * 获取指定车辆的详细配置信息
     * @param {Number} carId 车辆ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    getCarDetail1WithHttpInfo(carId) {
      let postBody = null;
      // verify the required parameter 'carId' is set
      if (carId === undefined || carId === null) {
        throw new Error("Missing the required parameter 'carId' when calling getCarDetail1");
      }

      let pathParams = {
        'car_id': carId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/cars/{car_id}/detail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取车辆详情
     * 获取指定车辆的详细配置信息
     * @param {Number} carId 车辆ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    getCarDetail1(carId) {
      return this.getCarDetail1WithHttpInfo(carId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取车辆详情
     * 获取待审核车辆的详细信息
     * @param {Number} carId 车辆ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    getCarDetail2WithHttpInfo(carId) {
      let postBody = null;
      // verify the required parameter 'carId' is set
      if (carId === undefined || carId === null) {
        throw new Error("Missing the required parameter 'carId' when calling getCarDetail2");
      }

      let pathParams = {
        'carId': carId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/admin/audit/cars/{carId}/detail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取车辆详情
     * 获取待审核车辆的详细信息
     * @param {Number} carId 车辆ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    getCarDetail2(carId) {
      return this.getCarDetail2WithHttpInfo(carId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取车辆被收藏数量
     * 获取指定车辆被所有用户收藏的总次数
     * @param {Number} carId 车辆ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    getCarFavoriteCountWithHttpInfo(carId) {
      let postBody = null;
      // verify the required parameter 'carId' is set
      if (carId === undefined || carId === null) {
        throw new Error("Missing the required parameter 'carId' when calling getCarFavoriteCount");
      }

      let pathParams = {
        'carId': carId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/favorites/count/{carId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取车辆被收藏数量
     * 获取指定车辆被所有用户收藏的总次数
     * @param {Number} carId 车辆ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    getCarFavoriteCount(carId) {
      return this.getCarFavoriteCountWithHttpInfo(carId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取车辆图片
     * 获取指定车辆的所有图片列表
     * @param {Number} carId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseObject} and HTTP response
     */
    getCarImagesWithHttpInfo(carId) {
      let postBody = null;
      // verify the required parameter 'carId' is set
      if (carId === undefined || carId === null) {
        throw new Error("Missing the required parameter 'carId' when calling getCarImages");
      }

      let pathParams = {
        'carId': carId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ApiResponseObject;
      return this.apiClient.callApi(
        '/cars/{carId}/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取车辆图片
     * 获取指定车辆的所有图片列表
     * @param {Number} carId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseObject}
     */
    getCarImages(carId) {
      return this.getCarImagesWithHttpInfo(carId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取车辆列表
     * 分页获取车辆列表，支持按状态和经销商ID筛选
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] 页码，默认1
     * @param {Number} [size = 10)] 每页数量，默认10
     * @param {Number} [status] 车辆状态：1-在售，0-下架
     * @param {Number} [dealerId] 经销商ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    getCarsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size'],
        'status': opts['status'],
        'dealer_id': opts['dealerId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/cars', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取车辆列表
     * 分页获取车辆列表，支持按状态和经销商ID筛选
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 页码，默认1 (default to 1)
     * @param {Number} opts.size 每页数量，默认10 (default to 10)
     * @param {Number} opts.status 车辆状态：1-在售，0-下架
     * @param {Number} opts.dealerId 经销商ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    getCars(opts) {
      return this.getCarsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 按品牌查询车辆
     * 分页获取指定品牌的车辆列表
     * @param {String} brand 品牌名称
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] 页码，默认1
     * @param {Number} [size = 10)] 每页数量，默认10
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    getCarsByBrandWithHttpInfo(brand, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'brand' is set
      if (brand === undefined || brand === null) {
        throw new Error("Missing the required parameter 'brand' when calling getCarsByBrand");
      }

      let pathParams = {
        'brand': brand
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/cars/brand/{brand}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 按品牌查询车辆
     * 分页获取指定品牌的车辆列表
     * @param {String} brand 品牌名称
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 页码，默认1 (default to 1)
     * @param {Number} opts.size 每页数量，默认10 (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    getCarsByBrand(brand, opts) {
      return this.getCarsByBrandWithHttpInfo(brand, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 按类别查询车辆
     * 分页获取指定类别的车辆列表
     * @param {String} category 车型类别
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] 页码，默认1
     * @param {Number} [size = 10)] 每页数量，默认10
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    getCarsByCategoryWithHttpInfo(category, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling getCarsByCategory");
      }

      let pathParams = {
        'category': category
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/cars/category/{category}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 按类别查询车辆
     * 分页获取指定类别的车辆列表
     * @param {String} category 车型类别
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 页码，默认1 (default to 1)
     * @param {Number} opts.size 每页数量，默认10 (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    getCarsByCategory(category, opts) {
      return this.getCarsByCategoryWithHttpInfo(category, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 按价格区间查询
     * 分页获取指定价格区间内的车辆列表
     * @param {Number} min 最低价格
     * @param {Number} max 最高价格
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] 页码，默认1
     * @param {Number} [size = 10)] 每页数量，默认10
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    getCarsByPriceRangeWithHttpInfo(min, max, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'min' is set
      if (min === undefined || min === null) {
        throw new Error("Missing the required parameter 'min' when calling getCarsByPriceRange");
      }
      // verify the required parameter 'max' is set
      if (max === undefined || max === null) {
        throw new Error("Missing the required parameter 'max' when calling getCarsByPriceRange");
      }

      let pathParams = {
      };
      let queryParams = {
        'min': min,
        'max': max,
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/cars/price', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 按价格区间查询
     * 分页获取指定价格区间内的车辆列表
     * @param {Number} min 最低价格
     * @param {Number} max 最高价格
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 页码，默认1 (default to 1)
     * @param {Number} opts.size 每页数量，默认10 (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    getCarsByPriceRange(min, max, opts) {
      return this.getCarsByPriceRangeWithHttpInfo(min, max, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取车型类别
     * 获取所有车型类别（如轿车、SUV等）及其数量统计
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    getCategoriesWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/cars/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取车型类别
     * 获取所有车型类别（如轿车、SUV等）及其数量统计
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    getCategories() {
      return this.getCategoriesWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取聊天记录
     * 获取当前用户与指定联系人的聊天记录，支持关联车辆和分页
     * @param {Number} contactId 联系人ID
     * @param {Object} opts Optional parameters
     * @param {Number} [carId] 关联车辆ID，可选
     * @param {Number} [page = 1)] 当前页码，默认1
     * @param {Number} [size = 20)] 每页大小，默认20
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    getChatMessagesWithHttpInfo(contactId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contactId' is set
      if (contactId === undefined || contactId === null) {
        throw new Error("Missing the required parameter 'contactId' when calling getChatMessages");
      }

      let pathParams = {
        'contactId': contactId
      };
      let queryParams = {
        'carId': opts['carId'],
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/message/chat/{contactId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取聊天记录
     * 获取当前用户与指定联系人的聊天记录，支持关联车辆和分页
     * @param {Number} contactId 联系人ID
     * @param {Object} opts Optional parameters
     * @param {Number} opts.carId 关联车辆ID，可选
     * @param {Number} opts.page 当前页码，默认1 (default to 1)
     * @param {Number} opts.size 每页大小，默认20 (default to 20)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    getChatMessages(contactId, opts) {
      return this.getChatMessagesWithHttpInfo(contactId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取内容统计
     * 获取内容相关统计数据
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] 起始日期
     * @param {String} [endDate] 结束日期
     * @param {String} [contentType = 'ALL')] 内容类型
     * @param {String} [groupBy = 'DAY')] 分组方式
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    getContentStatisticsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'contentType': opts['contentType'],
        'groupBy': opts['groupBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/admin/statistics/content', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取内容统计
     * 获取内容相关统计数据
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate 起始日期
     * @param {String} opts.endDate 结束日期
     * @param {String} opts.contentType 内容类型 (default to 'ALL')
     * @param {String} opts.groupBy 分组方式 (default to 'DAY')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    getContentStatistics(opts) {
      return this.getContentStatisticsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取经销商预约列表
     * 获取当前经销商的预约列表，可根据状态筛选（仅经销商可用）
     * @param {Object} opts Optional parameters
     * @param {String} [status] 预约状态：待确认、已确认、已完成、已取消
     * @param {Number} [page = 1)] 当前页码，默认1
     * @param {Number} [size = 10)] 每页大小，默认10
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    getDealerAppointmentsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'status': opts['status'],
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/appointment/dealer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取经销商预约列表
     * 获取当前经销商的预约列表，可根据状态筛选（仅经销商可用）
     * @param {Object} opts Optional parameters
     * @param {String} opts.status 预约状态：待确认、已确认、已完成、已取消
     * @param {Number} opts.page 当前页码，默认1 (default to 1)
     * @param {Number} opts.size 每页大小，默认10 (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    getDealerAppointments(opts) {
      return this.getDealerAppointmentsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取经销商详情
     * 获取指定经销商的详细信息
     * @param {Number} dealerId 经销商ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    getDealerDetailWithHttpInfo(dealerId) {
      let postBody = null;
      // verify the required parameter 'dealerId' is set
      if (dealerId === undefined || dealerId === null) {
        throw new Error("Missing the required parameter 'dealerId' when calling getDealerDetail");
      }

      let pathParams = {
        'dealerId': dealerId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/admin/dealers/{dealerId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取经销商详情
     * 获取指定经销商的详细信息
     * @param {Number} dealerId 经销商ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    getDealerDetail(dealerId) {
      return this.getDealerDetailWithHttpInfo(dealerId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取经销商列表
     * 根据条件获取经销商列表，支持分页和条件筛选
     * @param {Object} opts Optional parameters
     * @param {String} [keyword] 关键词
     * @param {String} [verifyStatus] 认证状态
     * @param {String} [region] 地区
     * @param {Number} [page = 1)] 页码
     * @param {Number} [size = 20)] 每页记录数
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    getDealerListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'keyword': opts['keyword'],
        'verifyStatus': opts['verifyStatus'],
        'region': opts['region'],
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/admin/dealers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取经销商列表
     * 根据条件获取经销商列表，支持分页和条件筛选
     * @param {Object} opts Optional parameters
     * @param {String} opts.keyword 关键词
     * @param {String} opts.verifyStatus 认证状态
     * @param {String} opts.region 地区
     * @param {Number} opts.page 页码 (default to 1)
     * @param {Number} opts.size 每页记录数 (default to 20)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    getDealerList(opts) {
      return this.getDealerListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取收藏数量
     * 获取当前用户的收藏总数
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    getFavoriteCountWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/favorites/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取收藏数量
     * 获取当前用户的收藏总数
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    getFavoriteCount() {
      return this.getFavoriteCountWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取收藏列表
     * 获取当前用户的收藏车辆列表，包含车辆基本信息。支持分页查询。
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] 页码
     * @param {Number} [size = 10)] 每页条数
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    getFavoriteListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/favorites', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取收藏列表
     * 获取当前用户的收藏车辆列表，包含车辆基本信息。支持分页查询。
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 页码 (default to 1)
     * @param {Number} opts.size 每页条数 (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    getFavoriteList(opts) {
      return this.getFavoriteListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取首页推荐
     * 获取首页的个性化推荐和热门推荐
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] 推荐数量限制
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    getHomeRecommendationsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/recommendations/home', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取首页推荐
     * 获取首页的个性化推荐和热门推荐
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 推荐数量限制 (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    getHomeRecommendations(opts) {
      return this.getHomeRecommendationsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取热门推荐
     * 获取系统内热门车辆推荐
     * @param {Object} opts Optional parameters
     * @param {String} [category] 车辆类别
     * @param {Number} [limit = 10)] 推荐数量限制
     * @param {Number} [days = 7)] 统计天数
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    getHotRecommendationsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'category': opts['category'],
        'limit': opts['limit'],
        'days': opts['days']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/recommendations/hot', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取热门推荐
     * 获取系统内热门车辆推荐
     * @param {Object} opts Optional parameters
     * @param {String} opts.category 车辆类别
     * @param {Number} opts.limit 推荐数量限制 (default to 10)
     * @param {Number} opts.days 统计天数 (default to 7)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    getHotRecommendations(opts) {
      return this.getHotRecommendationsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取交互消息
     * 获取当前用户的交互消息列表，支持已读/未读过滤、交互类型过滤和分页
     * @param {Object} opts Optional parameters
     * @param {Boolean} [read] 是否已读：true-已读，false-未读，null-全部
     * @param {String} [interactionType] 交互类型：COMMENT/REPLY/QUESTION/CONSULTATION等
     * @param {String} [targetType] 目标类型：VEHICLE/COMMENT/POST/DEALER等
     * @param {String} [startDate] 开始日期，格式：yyyy-MM-dd
     * @param {String} [endDate] 结束日期，格式：yyyy-MM-dd
     * @param {Number} [page = 1)] 当前页码，默认1
     * @param {Number} [size = 20)] 每页大小，默认20
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    getInteractionMessagesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'read': opts['read'],
        'interactionType': opts['interactionType'],
        'targetType': opts['targetType'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/message/interaction', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取交互消息
     * 获取当前用户的交互消息列表，支持已读/未读过滤、交互类型过滤和分页
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.read 是否已读：true-已读，false-未读，null-全部
     * @param {String} opts.interactionType 交互类型：COMMENT/REPLY/QUESTION/CONSULTATION等
     * @param {String} opts.targetType 目标类型：VEHICLE/COMMENT/POST/DEALER等
     * @param {String} opts.startDate 开始日期，格式：yyyy-MM-dd
     * @param {String} opts.endDate 结束日期，格式：yyyy-MM-dd
     * @param {Number} opts.page 当前页码，默认1 (default to 1)
     * @param {Number} opts.size 每页大小，默认20 (default to 20)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    getInteractionMessages(opts) {
      return this.getInteractionMessagesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取新车推荐
     * 获取最新上架的车辆推荐
     * @param {Object} opts Optional parameters
     * @param {String} [category] 车辆类别
     * @param {Number} [limit = 10)] 推荐数量限制
     * @param {Number} [days = 30)] 统计天数
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    getNewCarRecommendationsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'category': opts['category'],
        'limit': opts['limit'],
        'days': opts['days']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/recommendations/new', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取新车推荐
     * 获取最新上架的车辆推荐
     * @param {Object} opts Optional parameters
     * @param {String} opts.category 车辆类别
     * @param {Number} opts.limit 推荐数量限制 (default to 10)
     * @param {Number} opts.days 统计天数 (default to 30)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    getNewCarRecommendations(opts) {
      return this.getNewCarRecommendationsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取待确认的预约数量
     * 获取当前经销商待确认的预约数量（仅经销商可用）
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Number} and HTTP response
     */
    getPendingCountWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/appointment/pending/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取待确认的预约数量
     * 获取当前经销商待确认的预约数量（仅经销商可用）
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Number}
     */
    getPendingCount() {
      return this.getPendingCountWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取待审核列表
     * 获取待审核的经销商列表（管理员接口）
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] 
     * @param {Number} [size = 10)] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseObject} and HTTP response
     */
    getPendingDealersWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ApiResponseObject;
      return this.apiClient.callApi(
        '/dealers/admin/pending', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取待审核列表
     * 获取待审核的经销商列表（管理员接口）
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page  (default to 1)
     * @param {Number} opts.size  (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseObject}
     */
    getPendingDealers(opts) {
      return this.getPendingDealersWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取偏好推荐
     * 根据用户设置的购车偏好推荐车辆
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] 推荐数量限制
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    getPreferenceRecommendationsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/recommendations/preference', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取偏好推荐
     * 根据用户设置的购车偏好推荐车辆
     * @param {Object} opts Optional parameters
     * @param {Number} opts.limit 推荐数量限制 (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    getPreferenceRecommendations(opts) {
      return this.getPreferenceRecommendationsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取搜索历史
     * 获取当前用户的搜索历史记录列表，包含搜索关键词和搜索时间。支持分页查询。
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] 页码
     * @param {Number} [size = 10)] 每页条数
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    getSearchHistoryWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/behavior/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取搜索历史
     * 获取当前用户的搜索历史记录列表，包含搜索关键词和搜索时间。支持分页查询。
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 页码 (default to 1)
     * @param {Number} opts.size 每页条数 (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    getSearchHistory(opts) {
      return this.getSearchHistoryWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取系统消息
     * 获取当前用户的系统消息列表，支持已读/未读过滤和分页
     * @param {Object} opts Optional parameters
     * @param {Boolean} [read] 是否已读：true-已读，false-未读，null-全部
     * @param {String} [messageType] 消息类型：SYSTEM/MARKETING/NOTICE/ACTIVITY等
     * @param {String} [startDate] 开始日期，格式：yyyy-MM-dd
     * @param {String} [endDate] 结束日期，格式：yyyy-MM-dd
     * @param {Number} [page = 1)] 当前页码，默认1
     * @param {Number} [size = 20)] 每页大小，默认20
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    getSystemMessagesWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'read': opts['read'],
        'messageType': opts['messageType'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/message/system', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取系统消息
     * 获取当前用户的系统消息列表，支持已读/未读过滤和分页
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.read 是否已读：true-已读，false-未读，null-全部
     * @param {String} opts.messageType 消息类型：SYSTEM/MARKETING/NOTICE/ACTIVITY等
     * @param {String} opts.startDate 开始日期，格式：yyyy-MM-dd
     * @param {String} opts.endDate 结束日期，格式：yyyy-MM-dd
     * @param {Number} opts.page 当前页码，默认1 (default to 1)
     * @param {Number} opts.size 每页大小，默认20 (default to 20)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    getSystemMessages(opts) {
      return this.getSystemMessagesWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取系统统计
     * 获取系统相关统计数据
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] 起始日期
     * @param {String} [endDate] 结束日期
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    getSystemStatisticsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/admin/statistics/system', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取系统统计
     * 获取系统相关统计数据
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate 起始日期
     * @param {String} opts.endDate 结束日期
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    getSystemStatistics(opts) {
      return this.getSystemStatisticsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取未读消息统计
     * 获取当前用户未读消息的数量统计，按消息类型分组
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    getUnreadCountWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/message/unread/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取未读消息统计
     * 获取当前用户未读消息的数量统计，按消息类型分组
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    getUnreadCount() {
      return this.getUnreadCountWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取即将到来的预约
     * 获取当前用户即将到来的预约列表（状态为待确认或已确认）
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] 当前页码，默认1
     * @param {Number} [size = 10)] 每页大小，默认10
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    getUpcomingAppointmentsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/appointment/upcoming', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取即将到来的预约
     * 获取当前用户即将到来的预约列表（状态为待确认或已确认）
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 当前页码，默认1 (default to 1)
     * @param {Number} opts.size 每页大小，默认10 (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    getUpcomingAppointments(opts) {
      return this.getUpcomingAppointmentsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取用户预约列表
     * 获取当前用户的预约列表，可根据状态筛选
     * @param {Object} opts Optional parameters
     * @param {String} [status] 预约状态：待确认、已确认、已完成、已取消
     * @param {Number} [page = 1)] 当前页码，默认1
     * @param {Number} [size = 10)] 每页大小，默认10
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    getUserAppointmentsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'status': opts['status'],
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/appointment/user', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取用户预约列表
     * 获取当前用户的预约列表，可根据状态筛选
     * @param {Object} opts Optional parameters
     * @param {String} opts.status 预约状态：待确认、已确认、已完成、已取消
     * @param {Number} opts.page 当前页码，默认1 (default to 1)
     * @param {Number} opts.size 每页大小，默认10 (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    getUserAppointments(opts) {
      return this.getUserAppointmentsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取用户详情
     * 获取指定用户的详细信息
     * @param {Number} userId 用户ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    getUserDetailWithHttpInfo(userId) {
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling getUserDetail");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/admin/users/{userId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取用户详情
     * 获取指定用户的详细信息
     * @param {Number} userId 用户ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    getUserDetail(userId) {
      return this.getUserDetailWithHttpInfo(userId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取用户兴趣分析
     * 获取基于用户行为的兴趣分析数据，包括最常浏览的品牌、最常搜索的关键词、各类行为的数量等统计信息
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    getUserInterestsWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/behavior/interests', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取用户兴趣分析
     * 获取基于用户行为的兴趣分析数据，包括最常浏览的品牌、最常搜索的关键词、各类行为的数量等统计信息
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    getUserInterests() {
      return this.getUserInterestsWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取用户列表
     * 根据条件获取用户列表，支持分页和条件筛选
     * @param {Object} opts Optional parameters
     * @param {String} [keyword] 关键词
     * @param {String} [status] 用户状态
     * @param {String} [userType] 用户类型
     * @param {String} [startDate] 注册起始日期
     * @param {String} [endDate] 注册结束日期
     * @param {Number} [page = 1)] 页码
     * @param {Number} [size = 20)] 每页记录数
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    getUserListWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'keyword': opts['keyword'],
        'status': opts['status'],
        'userType': opts['userType'],
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/admin/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取用户列表
     * 根据条件获取用户列表，支持分页和条件筛选
     * @param {Object} opts Optional parameters
     * @param {String} opts.keyword 关键词
     * @param {String} opts.status 用户状态
     * @param {String} opts.userType 用户类型
     * @param {String} opts.startDate 注册起始日期
     * @param {String} opts.endDate 注册结束日期
     * @param {Number} opts.page 页码 (default to 1)
     * @param {Number} opts.size 每页记录数 (default to 20)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    getUserList(opts) {
      return this.getUserListWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取偏好设置
     * 获取当前登录用户的偏好设置
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseUserPreference} and HTTP response
     */
    getUserPreferenceWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ApiResponseUserPreference;
      return this.apiClient.callApi(
        '/users/preference', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取偏好设置
     * 获取当前登录用户的偏好设置
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseUserPreference}
     */
    getUserPreference() {
      return this.getUserPreferenceWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取用户资料
     * 获取当前登录用户的资料信息
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseUser} and HTTP response
     */
    getUserProfileWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ApiResponseUser;
      return this.apiClient.callApi(
        '/users/profile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取用户资料
     * 获取当前登录用户的资料信息
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseUser}
     */
    getUserProfile() {
      return this.getUserProfileWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 获取用户统计
     * 获取用户相关统计数据
     * @param {Object} opts Optional parameters
     * @param {String} [startDate] 起始日期
     * @param {String} [endDate] 结束日期
     * @param {String} [userType = 'ALL')] 用户类型
     * @param {String} [groupBy = 'DAY')] 分组方式
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    getUserStatisticsWithHttpInfo(opts) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'startDate': opts['startDate'],
        'endDate': opts['endDate'],
        'userType': opts['userType'],
        'groupBy': opts['groupBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/admin/statistics/users', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 获取用户统计
     * 获取用户相关统计数据
     * @param {Object} opts Optional parameters
     * @param {String} opts.startDate 起始日期
     * @param {String} opts.endDate 结束日期
     * @param {String} opts.userType 用户类型 (default to 'ALL')
     * @param {String} opts.groupBy 分组方式 (default to 'DAY')
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    getUserStatistics(opts) {
      return this.getUserStatisticsWithHttpInfo(opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 用户登录
     * 用户登录接口，支持邮箱和手机号登录
     * @param {module:model/LoginDTO} loginDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseObject} and HTTP response
     */
    loginWithHttpInfo(loginDTO) {
      let postBody = loginDTO;
      // verify the required parameter 'loginDTO' is set
      if (loginDTO === undefined || loginDTO === null) {
        throw new Error("Missing the required parameter 'loginDTO' when calling login");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ApiResponseObject;
      return this.apiClient.callApi(
        '/users/login', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 用户登录
     * 用户登录接口，支持邮箱和手机号登录
     * @param {module:model/LoginDTO} loginDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseObject}
     */
    login(loginDTO) {
      return this.loginWithHttpInfo(loginDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 用户登出
     * 用户登出接口
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseObject} and HTTP response
     */
    logoutWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ApiResponseObject;
      return this.apiClient.callApi(
        '/users/logout', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 用户登出
     * 用户登出接口
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseObject}
     */
    logout() {
      return this.logoutWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 标记消息为已读
     * 将指定消息标记为已读状态
     * @param {Number} messageId 消息ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    markMessageReadWithHttpInfo(messageId) {
      let postBody = null;
      // verify the required parameter 'messageId' is set
      if (messageId === undefined || messageId === null) {
        throw new Error("Missing the required parameter 'messageId' when calling markMessageRead");
      }

      let pathParams = {
        'messageId': messageId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/message/{messageId}/read', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 标记消息为已读
     * 将指定消息标记为已读状态
     * @param {Number} messageId 消息ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    markMessageRead(messageId) {
      return this.markMessageReadWithHttpInfo(messageId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 记录浏览行为
     * 记录用户对特定车辆的浏览行为。如果之前已有浏览记录，会更新时间和累加浏览时长。
     * @param {module:model/null} UNKNOWN_PARAMETER_NAME 车辆ID
     * @param {Object.<String, {String: Number}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    recordBrowseWithHttpInfo(UNKNOWN_PARAMETER_NAME, requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'UNKNOWN_PARAMETER_NAME' is set
      if (UNKNOWN_PARAMETER_NAME === undefined || UNKNOWN_PARAMETER_NAME === null) {
        throw new Error("Missing the required parameter 'UNKNOWN_PARAMETER_NAME' when calling recordBrowse");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling recordBrowse");
      }

      let pathParams = {
      };
      let queryParams = {
        'car_id': UNKNOWN_PARAMETER_NAME
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/behavior/browse', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 记录浏览行为
     * 记录用户对特定车辆的浏览行为。如果之前已有浏览记录，会更新时间和累加浏览时长。
     * @param {module:model/null} UNKNOWN_PARAMETER_NAME 车辆ID
     * @param {Object.<String, {String: Number}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    recordBrowse(UNKNOWN_PARAMETER_NAME, requestBody) {
      return this.recordBrowseWithHttpInfo(UNKNOWN_PARAMETER_NAME, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 记录搜索行为
     * 记录用户的搜索关键词，每次搜索都会创建新的记录
     * @param {module:model/null} UNKNOWN_PARAMETER_NAME 搜索关键词
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    recordSearchWithHttpInfo(UNKNOWN_PARAMETER_NAME, requestBody) {
      let postBody = requestBody;
      // verify the required parameter 'UNKNOWN_PARAMETER_NAME' is set
      if (UNKNOWN_PARAMETER_NAME === undefined || UNKNOWN_PARAMETER_NAME === null) {
        throw new Error("Missing the required parameter 'UNKNOWN_PARAMETER_NAME' when calling recordSearch");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling recordSearch");
      }

      let pathParams = {
      };
      let queryParams = {
        'keyword': UNKNOWN_PARAMETER_NAME
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/behavior/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 记录搜索行为
     * 记录用户的搜索关键词，每次搜索都会创建新的记录
     * @param {module:model/null} UNKNOWN_PARAMETER_NAME 搜索关键词
     * @param {Object.<String, {String: String}>} requestBody 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    recordSearch(UNKNOWN_PARAMETER_NAME, requestBody) {
      return this.recordSearchWithHttpInfo(UNKNOWN_PARAMETER_NAME, requestBody)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 用户注册
     * 新用户注册接口
     * @param {module:model/UserDTO} userDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseUser} and HTTP response
     */
    registerWithHttpInfo(userDTO) {
      let postBody = userDTO;
      // verify the required parameter 'userDTO' is set
      if (userDTO === undefined || userDTO === null) {
        throw new Error("Missing the required parameter 'userDTO' when calling register");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ApiResponseUser;
      return this.apiClient.callApi(
        '/users/register', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 用户注册
     * 新用户注册接口
     * @param {module:model/UserDTO} userDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseUser}
     */
    register(userDTO) {
      return this.registerWithHttpInfo(userDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 取消收藏
     * 将指定车辆从当前用户的收藏列表中移除。如果未收藏，则返回404状态码。
     * @param {Number} carId 车辆ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing HTTP response
     */
    removeFavoriteWithHttpInfo(carId) {
      let postBody = null;
      // verify the required parameter 'carId' is set
      if (carId === undefined || carId === null) {
        throw new Error("Missing the required parameter 'carId' when calling removeFavorite");
      }

      let pathParams = {
        'carId': carId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/favorites/{carId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 取消收藏
     * 将指定车辆从当前用户的收藏列表中移除。如果未收藏，则返回404状态码。
     * @param {Number} carId 车辆ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}
     */
    removeFavorite(carId) {
      return this.removeFavoriteWithHttpInfo(carId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 重置用户密码
     * 重置用户密码为随机密码
     * @param {Number} userId 用户ID
     * @param {Object} opts Optional parameters
     * @param {Boolean} [notifyUser = true)] 是否通知用户
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    resetUserPasswordWithHttpInfo(userId, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling resetUserPassword");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
        'notifyUser': opts['notifyUser']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/admin/users/{userId}/reset-password', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 重置用户密码
     * 重置用户密码为随机密码
     * @param {Number} userId 用户ID
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.notifyUser 是否通知用户 (default to true)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    resetUserPassword(userId, opts) {
      return this.resetUserPasswordWithHttpInfo(userId, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 保存车辆详情
     * 保存或更新车辆的详细配置信息
     * @param {Number} carId 车辆ID
     * @param {module:model/CarDetailDTO} carDetailDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    saveCarDetailWithHttpInfo(carId, carDetailDTO) {
      let postBody = carDetailDTO;
      // verify the required parameter 'carId' is set
      if (carId === undefined || carId === null) {
        throw new Error("Missing the required parameter 'carId' when calling saveCarDetail");
      }
      // verify the required parameter 'carDetailDTO' is set
      if (carDetailDTO === undefined || carDetailDTO === null) {
        throw new Error("Missing the required parameter 'carDetailDTO' when calling saveCarDetail");
      }

      let pathParams = {
        'car_id': carId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/cars/{car_id}/detail', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 保存车辆详情
     * 保存或更新车辆的详细配置信息
     * @param {Number} carId 车辆ID
     * @param {module:model/CarDetailDTO} carDetailDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    saveCarDetail(carId, carDetailDTO) {
      return this.saveCarDetailWithHttpInfo(carId, carDetailDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 搜索车辆
     * 根据关键词搜索车辆，支持品牌、型号、类别等字段
     * @param {String} keyword 搜索关键词
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] 页码，默认1
     * @param {Number} [size = 10)] 每页数量，默认10
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    searchCarsWithHttpInfo(keyword, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'keyword' is set
      if (keyword === undefined || keyword === null) {
        throw new Error("Missing the required parameter 'keyword' when calling searchCars");
      }

      let pathParams = {
      };
      let queryParams = {
        'keyword': keyword,
        'page': opts['page'],
        'size': opts['size']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/cars/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 搜索车辆
     * 根据关键词搜索车辆，支持品牌、型号、类别等字段
     * @param {String} keyword 搜索关键词
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page 页码，默认1 (default to 1)
     * @param {Number} opts.size 每页数量，默认10 (default to 10)
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    searchCars(keyword, opts) {
      return this.searchCarsWithHttpInfo(keyword, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 发送消息
     * 向指定用户发送消息，可选关联车辆
     * @param {Number} receiverId 接收者ID
     * @param {String} content 消息内容
     * @param {Object} opts Optional parameters
     * @param {Number} [carId] 关联车辆ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link Number} and HTTP response
     */
    sendMessageWithHttpInfo(receiverId, content, opts) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'receiverId' is set
      if (receiverId === undefined || receiverId === null) {
        throw new Error("Missing the required parameter 'receiverId' when calling sendMessage");
      }
      // verify the required parameter 'content' is set
      if (content === undefined || content === null) {
        throw new Error("Missing the required parameter 'content' when calling sendMessage");
      }

      let pathParams = {
      };
      let queryParams = {
        'receiverId': receiverId,
        'carId': opts['carId'],
        'content': content
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/message/send', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 发送消息
     * 向指定用户发送消息，可选关联车辆
     * @param {Number} receiverId 接收者ID
     * @param {String} content 消息内容
     * @param {Object} opts Optional parameters
     * @param {Number} opts.carId 关联车辆ID
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link Number}
     */
    sendMessage(receiverId, content, opts) {
      return this.sendMessageWithHttpInfo(receiverId, content, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 提交经销商信息
     * 提交经销商基本信息
     * @param {module:model/DealerDTO} dealerDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseDealer} and HTTP response
     */
    submitDealerInfoWithHttpInfo(dealerDTO) {
      let postBody = dealerDTO;
      // verify the required parameter 'dealerDTO' is set
      if (dealerDTO === undefined || dealerDTO === null) {
        throw new Error("Missing the required parameter 'dealerDTO' when calling submitDealerInfo");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ApiResponseDealer;
      return this.apiClient.callApi(
        '/dealers/info', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 提交经销商信息
     * 提交经销商基本信息
     * @param {module:model/DealerDTO} dealerDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseDealer}
     */
    submitDealerInfo(dealerDTO) {
      return this.submitDealerInfoWithHttpInfo(dealerDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 提交审核申请
     * 提交经销商审核申请
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseDealer} and HTTP response
     */
    submitDealerReviewWithHttpInfo() {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = ApiResponseDealer;
      return this.apiClient.callApi(
        '/dealers/review', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 提交审核申请
     * 提交经销商审核申请
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseDealer}
     */
    submitDealerReview() {
      return this.submitDealerReviewWithHttpInfo()
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 更新车辆信息
     * 更新指定车辆的基本信息和详细配置
     * @param {Number} carId 车辆ID
     * @param {module:model/CarDTO} carDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    updateCarWithHttpInfo(carId, carDTO) {
      let postBody = carDTO;
      // verify the required parameter 'carId' is set
      if (carId === undefined || carId === null) {
        throw new Error("Missing the required parameter 'carId' when calling updateCar");
      }
      // verify the required parameter 'carDTO' is set
      if (carDTO === undefined || carDTO === null) {
        throw new Error("Missing the required parameter 'carDTO' when calling updateCar");
      }

      let pathParams = {
        'car_id': carId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/cars/{car_id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 更新车辆信息
     * 更新指定车辆的基本信息和详细配置
     * @param {Number} carId 车辆ID
     * @param {module:model/CarDTO} carDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    updateCar(carId, carDTO) {
      return this.updateCarWithHttpInfo(carId, carDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 更新车辆详情
     * 更新指定车辆的详细配置信息
     * @param {Number} carId 车辆ID
     * @param {module:model/CarDetailDTO} carDetailDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    updateCarDetailWithHttpInfo(carId, carDetailDTO) {
      let postBody = carDetailDTO;
      // verify the required parameter 'carId' is set
      if (carId === undefined || carId === null) {
        throw new Error("Missing the required parameter 'carId' when calling updateCarDetail");
      }
      // verify the required parameter 'carDetailDTO' is set
      if (carDetailDTO === undefined || carDetailDTO === null) {
        throw new Error("Missing the required parameter 'carDetailDTO' when calling updateCarDetail");
      }

      let pathParams = {
        'car_id': carId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/cars/{car_id}/detail', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 更新车辆详情
     * 更新指定车辆的详细配置信息
     * @param {Number} carId 车辆ID
     * @param {module:model/CarDetailDTO} carDetailDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    updateCarDetail(carId, carDetailDTO) {
      return this.updateCarDetailWithHttpInfo(carId, carDetailDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 修改密码
     * 修改当前登录用户的密码
     * @param {module:model/PasswordUpdateDTO} passwordUpdateDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponse} and HTTP response
     */
    updatePasswordWithHttpInfo(passwordUpdateDTO) {
      let postBody = passwordUpdateDTO;
      // verify the required parameter 'passwordUpdateDTO' is set
      if (passwordUpdateDTO === undefined || passwordUpdateDTO === null) {
        throw new Error("Missing the required parameter 'passwordUpdateDTO' when calling updatePassword");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/users/password', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 修改密码
     * 修改当前登录用户的密码
     * @param {module:model/PasswordUpdateDTO} passwordUpdateDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponse}
     */
    updatePassword(passwordUpdateDTO) {
      return this.updatePasswordWithHttpInfo(passwordUpdateDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 更新预约状态
     * 经销商更新预约的状态（仅经销商可用）
     * @param {Number} appointmentId 预约ID
     * @param {String} status 新状态：已确认、已完成、已取消
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    updateStatusByDealerWithHttpInfo(appointmentId, status) {
      let postBody = null;
      // verify the required parameter 'appointmentId' is set
      if (appointmentId === undefined || appointmentId === null) {
        throw new Error("Missing the required parameter 'appointmentId' when calling updateStatusByDealer");
      }
      // verify the required parameter 'status' is set
      if (status === undefined || status === null) {
        throw new Error("Missing the required parameter 'status' when calling updateStatusByDealer");
      }

      let pathParams = {
        'appointmentId': appointmentId
      };
      let queryParams = {
        'status': status
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/appointment/dealer/{appointmentId}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 更新预约状态
     * 经销商更新预约的状态（仅经销商可用）
     * @param {Number} appointmentId 预约ID
     * @param {String} status 新状态：已确认、已完成、已取消
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    updateStatusByDealer(appointmentId, status) {
      return this.updateStatusByDealerWithHttpInfo(appointmentId, status)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 更新偏好设置
     * 更新当前登录用户的偏好设置
     * @param {module:model/PreferenceDTO} preferenceDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseUserPreference} and HTTP response
     */
    updateUserPreferenceWithHttpInfo(preferenceDTO) {
      let postBody = preferenceDTO;
      // verify the required parameter 'preferenceDTO' is set
      if (preferenceDTO === undefined || preferenceDTO === null) {
        throw new Error("Missing the required parameter 'preferenceDTO' when calling updateUserPreference");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ApiResponseUserPreference;
      return this.apiClient.callApi(
        '/users/preference', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 更新偏好设置
     * 更新当前登录用户的偏好设置
     * @param {module:model/PreferenceDTO} preferenceDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseUserPreference}
     */
    updateUserPreference(preferenceDTO) {
      return this.updateUserPreferenceWithHttpInfo(preferenceDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 更新用户资料
     * 更新当前登录用户的资料信息
     * @param {module:model/UserProfileDTO} userProfileDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseUser} and HTTP response
     */
    updateUserProfileWithHttpInfo(userProfileDTO) {
      let postBody = userProfileDTO;
      // verify the required parameter 'userProfileDTO' is set
      if (userProfileDTO === undefined || userProfileDTO === null) {
        throw new Error("Missing the required parameter 'userProfileDTO' when calling updateUserProfile");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ApiResponseUser;
      return this.apiClient.callApi(
        '/users/profile', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 更新用户资料
     * 更新当前登录用户的资料信息
     * @param {module:model/UserProfileDTO} userProfileDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseUser}
     */
    updateUserProfile(userProfileDTO) {
      return this.updateUserProfileWithHttpInfo(userProfileDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 更新用户状态
     * 启用或禁用用户账号
     * @param {Number} userId 用户ID
     * @param {module:model/UserStatusDTO} userStatusDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/Result} and HTTP response
     */
    updateUserStatusWithHttpInfo(userId, userStatusDTO) {
      let postBody = userStatusDTO;
      // verify the required parameter 'userId' is set
      if (userId === undefined || userId === null) {
        throw new Error("Missing the required parameter 'userId' when calling updateUserStatus");
      }
      // verify the required parameter 'userStatusDTO' is set
      if (userStatusDTO === undefined || userStatusDTO === null) {
        throw new Error("Missing the required parameter 'userStatusDTO' when calling updateUserStatus");
      }

      let pathParams = {
        'userId': userId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = Result;
      return this.apiClient.callApi(
        '/admin/users/{userId}/status', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 更新用户状态
     * 启用或禁用用户账号
     * @param {Number} userId 用户ID
     * @param {module:model/UserStatusDTO} userStatusDTO 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/Result}
     */
    updateUserStatus(userId, userStatusDTO) {
      return this.updateUserStatusWithHttpInfo(userId, userStatusDTO)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 上传头像
     * 上传当前登录用户的头像 - 支持的格式：JPG、PNG、GIF - 文件大小限制：2MB - 文件命名规则：avatar_timestamp.extension 
     * @param {File} file 头像文件 - 支持的格式：JPG、PNG、GIF - 最大大小：2MB 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponse} and HTTP response
     */
    uploadAvatarWithHttpInfo(file) {
      let postBody = null;
      // verify the required parameter 'file' is set
      if (file === undefined || file === null) {
        throw new Error("Missing the required parameter 'file' when calling uploadAvatar");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file': file
      };

      let authNames = ['Sa-Token'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = ApiResponse;
      return this.apiClient.callApi(
        '/users/avatar', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 上传头像
     * 上传当前登录用户的头像 - 支持的格式：JPG、PNG、GIF - 文件大小限制：2MB - 文件命名规则：avatar_timestamp.extension 
     * @param {File} file 头像文件 - 支持的格式：JPG、PNG、GIF - 最大大小：2MB 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponse}
     */
    uploadAvatar(file) {
      return this.uploadAvatarWithHttpInfo(file)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * 上传车辆图片
     * 上传车辆图片，支持缩略图和完整图，每种类型最多一张
     * @param {Number} carId 
     * @param {String} type 
     * @param {Object} opts Optional parameters
     * @param {module:model/UploadCarImageRequest} [uploadCarImageRequest] 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/ApiResponseObject} and HTTP response
     */
    uploadCarImageWithHttpInfo(carId, type, opts) {
      opts = opts || {};
      let postBody = opts['uploadCarImageRequest'];
      // verify the required parameter 'carId' is set
      if (carId === undefined || carId === null) {
        throw new Error("Missing the required parameter 'carId' when calling uploadCarImage");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling uploadCarImage");
      }

      let pathParams = {
        'carId': carId
      };
      let queryParams = {
        'type': type
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['Sa-Token'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = ApiResponseObject;
      return this.apiClient.callApi(
        '/cars/{carId}/images', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null
      );
    }

    /**
     * 上传车辆图片
     * 上传车辆图片，支持缩略图和完整图，每种类型最多一张
     * @param {Number} carId 
     * @param {String} type 
     * @param {Object} opts Optional parameters
     * @param {module:model/UploadCarImageRequest} opts.uploadCarImageRequest 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/ApiResponseObject}
     */
    uploadCarImage(carId, type, opts) {
      return this.uploadCarImageWithHttpInfo(carId, type, opts)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


}
